// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// Check for compatibility between `uniffi` and `uniffi_bindgen` versions.
// Note that we have an error message on the same line as the assertion.
// This is important, because if the assertion fails, the compiler only
// seems to show that single line as context for the user.
uniffi::assert_compatible_version!("0.23.0"); // Please check that you depend on version 0.23.0 of the `uniffi` crate.

// Everybody gets basic buffer support, since it's needed for passing complex types over the FFI.
//
// See `uniffi/src/ffi/rustbuffer.rs` for documentation on these functions

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub extern "C" fn ffi_rust_log_forwarder_5328_rustbuffer_alloc(
    size: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::ffi::uniffi_rustbuffer_alloc(size, call_status)
}

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub unsafe extern "C" fn ffi_rust_log_forwarder_5328_rustbuffer_from_bytes(
    bytes: uniffi::ForeignBytes,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::ffi::uniffi_rustbuffer_from_bytes(bytes, call_status)
}

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub unsafe extern "C" fn ffi_rust_log_forwarder_5328_rustbuffer_free(
    buf: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::ffi::uniffi_rustbuffer_free(buf, call_status)
}

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub unsafe extern "C" fn ffi_rust_log_forwarder_5328_rustbuffer_reserve(
    buf: uniffi::RustBuffer,
    additional: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::ffi::uniffi_rustbuffer_reserve(buf, additional, call_status)
}

// Error definitions, corresponding to `error` in the UDL.

// Enum definitions, corresponding to `enum` in UDL.

#[doc(hidden)]
pub struct FfiConverterTypeLevel;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeLevel {
    type RustType = r#Level;

    fn write(obj: Self::RustType, buf: &mut std::vec::Vec<u8>) {
        use uniffi::deps::bytes::BufMut;
        match obj {
            r#Level::r#Error {} => {
                buf.put_i32(1);
            }
            r#Level::r#Warn {} => {
                buf.put_i32(2);
            }
            r#Level::r#Info {} => {
                buf.put_i32(3);
            }
            r#Level::r#Debug {} => {
                buf.put_i32(4);
            }
            r#Level::r#Trace {} => {
                buf.put_i32(5);
            }
        };
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<r#Level> {
        use uniffi::deps::bytes::Buf;
        uniffi::check_remaining(buf, 4)?;
        Ok(match buf.get_i32() {
            1 => r#Level::r#Error,
            2 => r#Level::r#Warn,
            3 => r#Level::r#Info,
            4 => r#Level::r#Debug,
            5 => r#Level::r#Trace,
            v => uniffi::deps::anyhow::bail!("Invalid Level enum value: {}", v),
        })
    }
}

// Record definitions, implemented as method-less structs, corresponding to `dictionary` objects.

#[doc(hidden)]
pub struct FfiConverterTypeRecord;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeRecord {
    type RustType = r#Record;

    fn write(obj: r#Record, buf: &mut std::vec::Vec<u8>) {
        // If the provided struct doesn't match the fields declared in the UDL, then
        // the generated code here will fail to compile with somewhat helpful error.
        <FfiConverterTypeLevel as uniffi::FfiConverter>::write(obj.r#level, buf);
        <String as uniffi::FfiConverter>::write(obj.r#target, buf);
        <String as uniffi::FfiConverter>::write(obj.r#message, buf);
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<r#Record> {
        Ok(r#Record {
            r#level: <FfiConverterTypeLevel as uniffi::FfiConverter>::try_read(buf)?,
            r#target: <String as uniffi::FfiConverter>::try_read(buf)?,
            r#message: <String as uniffi::FfiConverter>::try_read(buf)?,
        })
    }
}

// Top level functions, corresponding to UDL `namespace` functions.

#[doc(hidden)]
#[no_mangle]
#[allow(clippy::let_unit_value)] // Sometimes we generate code that binds `_retval` to `()`.
pub extern "C" fn r#rust_log_forwarder_5328_set_logger(
    r#logger: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("rust_log_forwarder_5328_set_logger");

    uniffi::call_with_output(call_status, || {
        r#set_logger(
        match<std::option::Option<FfiConverterCallbackInterfaceLogger> as uniffi::FfiConverter>::try_lift(r#logger) {
            Ok(val) => val,
            Err(err) => panic!("Failed to convert arg '{}': {}", "logger", err),
        })
    })
}

#[doc(hidden)]
#[no_mangle]
#[allow(clippy::let_unit_value)] // Sometimes we generate code that binds `_retval` to `()`.
pub extern "C" fn r#rust_log_forwarder_5328_set_max_level(
    r#level: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("rust_log_forwarder_5328_set_max_level");

    uniffi::call_with_output(call_status, || {
        r#set_max_level(
            match <FfiConverterTypeLevel as uniffi::FfiConverter>::try_lift(r#level) {
                Ok(val) => val,
                Err(err) => panic!("Failed to convert arg '{}': {}", "level", err),
            },
        )
    })
}

#[doc(hidden)]
#[no_mangle]
#[allow(clippy::let_unit_value)] // Sometimes we generate code that binds `_retval` to `()`.
pub extern "C" fn r#rust_log_forwarder_5328_test_performance(
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("rust_log_forwarder_5328_test_performance");

    uniffi::call_with_output(call_status, || {
        #[allow(clippy::redundant_closure)]
        r#test_performance()
    })
}
// Object definitions, corresponding to UDL `interface` definitions.

// Callback Interface definitions, corresponding to UDL `callback interface` definitions.

// Register a foreign callback for getting across the FFI.
#[doc(hidden)]
static FOREIGN_CALLBACK_LOGGER_INTERNALS: uniffi::ForeignCallbackInternals =
    uniffi::ForeignCallbackInternals::new();

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn ffi_rust_log_forwarder_5328_Logger_init_callback(
    callback: uniffi::ForeignCallback,
    _: &mut uniffi::RustCallStatus,
) {
    FOREIGN_CALLBACK_LOGGER_INTERNALS.set_callback(callback);
    // The call status should be initialized to CALL_SUCCESS, so no need to modify it.
}

// Make an implementation which will shell out to the foreign language.
#[doc(hidden)]
#[derive(Debug)]
struct FfiConverterCallbackInterfaceLogger {
    handle: u64,
}

impl Drop for FfiConverterCallbackInterfaceLogger {
    fn drop(&mut self) {
        let callback = FOREIGN_CALLBACK_LOGGER_INTERNALS.get_callback().unwrap();
        let mut rbuf = uniffi::RustBuffer::new();
        unsafe {
            callback(
                self.handle,
                uniffi::IDX_CALLBACK_FREE,
                Default::default(),
                &mut rbuf,
            )
        };
    }
}

uniffi::deps::static_assertions::assert_impl_all!(FfiConverterCallbackInterfaceLogger: Send);

pub type ForeignCallback2 = unsafe extern "C" fn(
    handle: u64,
    method: u32,
    arg_data: *const u8,
    arg_len: i32,
    buf_ptr: *mut uniffi::RustBuffer,
) -> std::ffi::c_int;

impl r#Logger for FfiConverterCallbackInterfaceLogger {
    fn r#log(&self, r#record: r#Record) {
        let mut args_buf = Vec::new();

        <FfiConverterTypeRecord as uniffi::FfiConverter>::write(r#record, &mut args_buf);
        let callback = FOREIGN_CALLBACK_LOGGER_INTERNALS.get_callback().unwrap();

        unsafe {
            // SAFETY:
            // * We're passing in a pointer to an empty buffer.
            //   * Nothing allocated, so nothing to drop.
            // * We expect the callback to write into that a valid allocated instance of a
            //   RustBuffer.
            let mut ret_rbuf = uniffi::RustBuffer::new();
            let callback2: ForeignCallback2 = std::mem::transmute(callback);
            let ret = callback2(self.handle, 1, args_buf.as_ptr(), args_buf.len().try_into().unwrap(), &mut ret_rbuf);
            #[allow(clippy::let_and_return, clippy::let_unit_value)]
            match ret {
                1 => {
                    // 1 indicates success with the return value written to the RustBuffer for
                    //   non-void calls.
                    let result = {
                        uniffi::RustBuffer::destroy(ret_rbuf);
                    };
                    result
                }
                -2 => {
                    // -2 indicates an error written to the RustBuffer
                    panic!("Callback return -2, but throws_type() is None");
                }
                // 0 is a deprecated method to indicates success for void returns
                0 => {
                    uniffi::deps::log::error!("UniFFI: Callback interface returned 0. Please update the bindings code to return 1 for all successful calls");
                }
                // -1 indicates an unexpected error
                -1 => {
                    if !ret_rbuf.is_empty() {
                        let reason = match <String as uniffi::FfiConverter>::try_lift(ret_rbuf) {
                            Ok(s) => s,
                            Err(_) => String::from("[Error reading reason]"),
                        };
                        panic!("callback failed. Reason: {}", reason);
                    } else {
                        panic!("Callback failed")
                    }
                }
                // Other values should never be returned
                _ => panic!("Callback failed with unexpected return code"),
            }
        }
    }
}

unsafe impl uniffi::FfiConverter for FfiConverterCallbackInterfaceLogger {
    // This RustType allows for rust code that inputs this type as a Box<dyn CallbackInterfaceTrait> param
    type RustType = Box<dyn r#Logger>;
    type FfiType = u64;

    // Lower and write are tricky to implement because we have a dyn trait as our type.  There's
    // probably a way to, but this carries lots of thread safety risks, down to impedance
    // mismatches between Rust and foreign languages, and our uncertainty around implementations of
    // concurrent handlemaps.
    //
    // The use case for them is also quite exotic: it's passing a foreign callback back to the foreign
    // language.
    //
    // Until we have some certainty, and use cases, we shouldn't use them.
    fn lower(_obj: Self::RustType) -> Self::FfiType {
        panic!("Lowering CallbackInterface not supported")
    }

    fn write(_obj: Self::RustType, _buf: &mut std::vec::Vec<u8>) {
        panic!("Writing CallbackInterface not supported")
    }

    fn try_lift(v: Self::FfiType) -> uniffi::deps::anyhow::Result<Self::RustType> {
        Ok(Box::new(Self { handle: v }))
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<Self::RustType> {
        use uniffi::deps::bytes::Buf;
        uniffi::check_remaining(buf, 8)?;
        <Self as uniffi::FfiConverter>::try_lift(buf.get_u64())
    }
}

// External and Wrapped types
// Support for external types.

// Types with an external `FfiConverter`...

// For custom scaffolding types we need to generate an FfiConverterType based on the
// UniffiCustomTypeConverter implementation that the library supplies

// The `reexport_uniffi_scaffolding` macro
// Code to re-export the UniFFI scaffolding functions.
//
// Rust won't always re-export the functions from dependencies
// ([rust-lang#50007](https://github.com/rust-lang/rust/issues/50007))
//
// A workaround for this is to have the dependent crate reference a function from its dependency in
// an extern "C" function. This is clearly hacky and brittle, but at least we have some unittests
// that check if this works (fixtures/reexport-scaffolding-macro).
//
// The main way we use this macro is for that contain multiple UniFFI components (libxul,
// megazord).  The combined library has a cargo dependency for each component and calls
// uniffi_reexport_scaffolding!() for each one.

#[doc(hidden)]
pub fn uniffi_reexport_hack() {}

#[macro_export]
macro_rules! uniffi_reexport_scaffolding {
    () => {
        #[doc(hidden)]
        #[no_mangle]
        pub extern "C" fn rust_log_forwarder_uniffi_reexport_hack() {
            $crate::uniffi_reexport_hack()
        }
    };
}
